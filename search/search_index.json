{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"YouTube Playlist Analyzer","text":"<p>A web application that analyzes YouTube playlists to provide insights about video counts, durations, and playback speed calculations.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Extract and analyze YouTube playlist information</li> <li>Calculate the total duration of playlists</li> <li>Estimate watching time at different playback speeds</li> <li>User-friendly web interface</li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12</li> <li>YouTube Data API key</li> <li>Docker (optional)</li> </ul>"},{"location":"#setup","title":"Setup","text":""},{"location":"#local-development","title":"Local Development","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/805karansaini/youtube_playlist_analyser\ncd youtube_playlist_analyser\n</code></pre></p> </li> <li> <p>Create a virtual environment:    <pre><code>python3 -m venv .venv\n</code></pre></p> </li> <li> <p>Activate the virtual environment:</p> </li> <li>On Windows:      <pre><code>.venv\\Scripts\\activate\n</code></pre></li> <li> <p>On macOS/Linux:      <pre><code>source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Create a <code>.env</code> file with your YouTube API key:    <pre><code>cp .env.example .env\n</code></pre>    Then, open the <code>.env</code> file and add your YouTube API key:    <pre><code>YOUTUBE_API_KEY=your_api_key_here\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Run the application:    <pre><code>python app/main.py\n</code></pre>    or    <pre><code>cd app\ngunicorn --bind 0.0.0.0:5000 main:app\n</code></pre></p> </li> </ol>"},{"location":"#docker-deployment","title":"Docker Deployment","text":"<ol> <li> <p>Build the Docker image:    <pre><code>docker build -t youtube-playlist-analyser .\n</code></pre></p> </li> <li> <p>Run the container:    <pre><code>docker run -p 5000:5001 youtube-playlist-analyser\n</code></pre></p> </li> </ol>"},{"location":"#usage","title":"Usage","text":"<ol> <li>Access the application at <code>http://localhost:5000</code>.</li> <li>Enter a YouTube playlist URL.</li> <li>View the analysis results, including:</li> <li>Total number of videos</li> <li>Average video length</li> <li>Total playlist duration</li> <li>Estimated watching time at different speeds</li> </ol>"},{"location":"#documentation","title":"Documentation","text":"<p>Documentation is built using MkDocs. To view the documentation locally:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"reference/config/","title":"Config Documentation","text":""},{"location":"reference/config/#app.core.config","title":"<code>app.core.config</code>","text":""},{"location":"reference/config/#app.core.config.Config","title":"<code>Config</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Configuration settings for YouTube API integration. Automatically loads from .env file.</p> <p>This class manages configuration settings for interacting with the YouTube API, including API keys, version information, and request parameters.</p> <p>Attributes:</p> Name Type Description <code>YOUTUBE_API_KEY</code> <code>str</code> <p>The API key for authenticating with YouTube API.</p> <code>YOUTUBE_API_VERSION</code> <code>str</code> <p>The version of YouTube API to use (default: \"v3\").</p> <code>MAX_RESULTS</code> <code>int</code> <p>Maximum number of results to return per API request (default: 50).</p> <code>STATIC_URL</code> <code>str</code> <p>Base URL for the YouTube API playlist items endpoint.</p> Source code in <code>app/core/config.py</code> <pre><code>class Config(BaseSettings):\n    \"\"\"Configuration settings for YouTube API integration. Automatically loads from .env file.\n\n    This class manages configuration settings for interacting with the YouTube API,\n    including API keys, version information, and request parameters.\n\n    Attributes:\n        YOUTUBE_API_KEY (str): The API key for authenticating with YouTube API.\n        YOUTUBE_API_VERSION (str): The version of YouTube API to use (default: \"v3\").\n        MAX_RESULTS (int): Maximum number of results to return per API request (default: 50).\n        STATIC_URL (str): Base URL for the YouTube API playlist items endpoint.\n    \"\"\"\n\n    YOUTUBE_API_KEY: str\n\n    # Optional configuration with defaults\n    YOUTUBE_API_VERSION: str = \"v3\"\n    MAX_RESULTS: PositiveInt = 50\n    STATIC_URL: str = \"https://www.googleapis.com/youtube/v3/playlistItems\"\n\n    class Config:\n        env_file = \".env\"\n        env_file_encoding = \"utf-8\"\n</code></pre>"},{"location":"reference/exceptions/","title":"Exceptions Documentation","text":""},{"location":"reference/exceptions/#app.exceptions.exception","title":"<code>app.exceptions.exception</code>","text":""},{"location":"reference/exceptions/#app.exceptions.exception.InvalidYoutubePlaylistLink","title":"<code>InvalidYoutubePlaylistLink</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when playlist link is not valid.</p> <p>This exception is raised when the provided YouTube playlist link is incorrect, inaccessible, or does not follow the expected format.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Explanation of the error. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidYoutubePlaylistLink</code> <p>When the playlist URL is not valid.</p> Example <p>raise InvalidYoutubePlaylistLink(\"The provided URL is not a valid YouTube playlist link\")</p> Source code in <code>app/exceptions/exception.py</code> <pre><code>class InvalidYoutubePlaylistLink(Exception):\n    \"\"\"Exception raised when playlist link is not valid.\n\n    This exception is raised when the provided YouTube playlist link is incorrect,\n    inaccessible, or does not follow the expected format.\n\n    Args:\n        message (str, optional): Explanation of the error. Defaults to None.\n\n    Raises:\n        InvalidYoutubePlaylistLink: When the playlist URL is not valid.\n\n    Example:\n        &gt;&gt;&gt; raise InvalidYoutubePlaylistLink(\"The provided URL is not a valid YouTube playlist link\")\n    \"\"\"\n\n    def __init__(self, message=None):\n        \"\"\"Initialize the InvalidYoutubePlaylistLink exception.\n\n        Args:\n            message (str, optional): Custom error message explaining why the playlist link is invalid.\n                Defaults to None.\n        \"\"\"\n        super().__init__(message)\n</code></pre>"},{"location":"reference/exceptions/#app.exceptions.exception.InvalidYoutubePlaylistLink.__init__","title":"<code>__init__(message=None)</code>","text":"<p>Initialize the InvalidYoutubePlaylistLink exception.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>Custom error message explaining why the playlist link is invalid. Defaults to None.</p> <code>None</code> Source code in <code>app/exceptions/exception.py</code> <pre><code>def __init__(self, message=None):\n    \"\"\"Initialize the InvalidYoutubePlaylistLink exception.\n\n    Args:\n        message (str, optional): Custom error message explaining why the playlist link is invalid.\n            Defaults to None.\n    \"\"\"\n    super().__init__(message)\n</code></pre>"},{"location":"reference/home_routes/","title":"Home Routes Documentation","text":""},{"location":"reference/home_routes/#app.routes.home_routes","title":"<code>app.routes.home_routes</code>","text":""},{"location":"reference/home_routes/#app.routes.home_routes.analyze_playlist","title":"<code>analyze_playlist()</code>","text":"<p>This function processes a YouTube playlist URL submitted via POST request, extracts playlist information, and returns analyzed data including video count, durations, and playback speed calculations.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Rendered HTML template containing: - Playlist statistics (video count, average length, total duration) - Playback duration at different speeds (1.25x - 2.00x) - Chart data with video titles and durations</p> <p>Raises:</p> Type Description <code>InvalidYoutubePlaylistLink</code> <p>If the provided playlist URL is invalid or malformed</p> <code>Exception</code> <p>For any other unexpected errors during processing</p> Example usage <p>POST / with form data containing: {     \"search_string\": \"https://www.youtube.com/playlist?list=PLAYLIST_ID\" }</p> Source code in <code>app/routes/home_routes.py</code> <pre><code>@bp.route(\"/\", methods=[\"POST\"])\ndef analyze_playlist() -&gt; str:\n    \"\"\"\n    This function processes a YouTube playlist URL submitted via POST request,\n    extracts playlist information, and returns analyzed data including video count,\n    durations, and playback speed calculations.\n\n    Returns:\n        str: Rendered HTML template containing:\n            - Playlist statistics (video count, average length, total duration)\n            - Playback duration at different speeds (1.25x - 2.00x)\n            - Chart data with video titles and durations\n\n    Raises:\n        InvalidYoutubePlaylistLink: If the provided playlist URL is invalid or malformed\n        Exception: For any other unexpected errors during processing\n\n    Example usage:\n        POST / with form data containing:\n        {\n            \"search_string\": \"https://www.youtube.com/playlist?list=PLAYLIST_ID\"\n        }\n    \"\"\"\n    try:\n        user_link = request.form.get(\"search_string\", \"\").strip()\n        playlist_id = youtube_service.extract_playlist_id(user_link)\n        video_count, total_seconds, videos = youtube_service.get_playlist_details(\n            playlist_id\n        )\n\n        # Prepare chart data\n        chart_data = [\n            [video[\"title\"] for video in videos],\n            [video[\"duration_minutes\"] for video in videos],\n        ]\n\n        # Prepare display text\n        display_text = [\n            f\"No of videos: {video_count}\",\n            f\"Average length of a video: {format_duration(total_seconds/video_count)}\",\n            f\"Total length of playlist: {format_duration(total_seconds)}\",\n            f\"At 1.25x: {format_duration(total_seconds/1.25)}\",\n            f\"At 1.50x: {format_duration(total_seconds/1.50)}\",\n            f\"At 1.75x: {format_duration(total_seconds/1.75)}\",\n            f\"At 2.00x: {format_duration(total_seconds/2.00)}\",\n        ]\n\n        return render_template(\n            \"home.html\", display_text=display_text, chart_data=chart_data\n        )\n\n    except InvalidYoutubePlaylistLink as e:\n        logger.error(f\"Invalid playlist error: {str(e)}\")\n        return render_template(\n            \"home.html\",\n            display_text=[\n                \"Invalid playlist link\",\n                \"Please try again with correct parameters\",\n            ],\n        )\n    except Exception as e:\n        logger.error(f\"Unexpected error: {str(e)}\")\n        return render_template(\n            \"home.html\",\n            display_text=[\"An unexpected error occurred\", \"Please try again later\"],\n        )\n</code></pre>"},{"location":"reference/home_routes/#app.routes.home_routes.home","title":"<code>home()</code>","text":"<p>This route function serves the home page of the application by rendering the 'home.html' template.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The rendered HTML content of the home page.</p> Example <p>When accessing the root URL ('/'), this function will be called and return the rendered home page template.</p> Source code in <code>app/routes/home_routes.py</code> <pre><code>@bp.route(\"/\", methods=[\"GET\"])\ndef home() -&gt; str:\n    \"\"\"This route function serves the home page of the application by rendering\n    the 'home.html' template.\n\n    Returns:\n        str: The rendered HTML content of the home page.\n\n    Example:\n        When accessing the root URL ('/'), this function will be called and\n        return the rendered home page template.\n    \"\"\"\n    return render_template(\"home.html\")\n</code></pre>"},{"location":"reference/main/","title":"Main Documentation","text":""},{"location":"reference/main/#app.main","title":"<code>app.main</code>","text":"<p>Initialize and configure the Flask application.</p> <p>This module serves as the entry point for the YouTube Playlist Analyzer application. It handles the basic Flask app configuration, logging setup, and blueprint registration.</p> Typical usage example <p>python main.py</p>"},{"location":"reference/utils/","title":"Utils Documentation","text":""},{"location":"reference/utils/#app.helper.utils","title":"<code>app.helper.utils</code>","text":""},{"location":"reference/utils/#app.helper.utils.format_duration","title":"<code>format_duration(seconds)</code>","text":"<p>Format a duration in seconds into a human-readable string.</p> <p>This function takes a duration in seconds and converts it into a formatted string showing days, hours, minutes, and seconds as appropriate. The function will omit larger units if they are zero (e.g., won't show days if the duration is less than 24 hours).</p> <p>Parameters:</p> Name Type Description Default <code>seconds</code> <code>float</code> <p>The duration in seconds to format.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A formatted string representation of the duration in the format: \"{d} Days, {h} Hours, {m} Minutes, {s} Seconds\" where larger units are omitted if zero.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; format_duration(3665)\n'1 Hours, 1 Minutes, 5 Seconds'\n&gt;&gt;&gt; format_duration(45)\n'45 Seconds'\n&gt;&gt;&gt; format_duration(90000)\n'1 Days, 1 Hours, 0 Minutes, 0 Seconds'\n</code></pre> Source code in <code>app/helper/utils.py</code> <pre><code>def format_duration(seconds: float) -&gt; str:\n    \"\"\"Format a duration in seconds into a human-readable string.\n\n    This function takes a duration in seconds and converts it into a formatted string\n    showing days, hours, minutes, and seconds as appropriate. The function will omit\n    larger units if they are zero (e.g., won't show days if the duration is less than\n    24 hours).\n\n    Args:\n        seconds (float): The duration in seconds to format.\n\n    Returns:\n        str: A formatted string representation of the duration in the format:\n            \"{d} Days, {h} Hours, {m} Minutes, {s} Seconds\" where larger units\n            are omitted if zero.\n\n    Examples:\n        &gt;&gt;&gt; format_duration(3665)\n        '1 Hours, 1 Minutes, 5 Seconds'\n        &gt;&gt;&gt; format_duration(45)\n        '45 Seconds'\n        &gt;&gt;&gt; format_duration(90000)\n        '1 Days, 1 Hours, 0 Minutes, 0 Seconds'\n    \"\"\"\n    minutes, seconds = divmod(seconds, 60)\n    hours, minutes = divmod(minutes, 60)\n    days, hours = divmod(hours, 24)\n\n    if days == 0:\n        if hours == 0:\n            if minutes == 0:\n                return f\"{int(seconds)} Seconds\"\n            return f\"{int(minutes)} Minutes, {int(seconds)} Seconds\"\n        return f\"{int(hours)} Hours, {int(minutes)} Minutes, {int(seconds)} Seconds\"\n    return f\"{int(days)} Days, {int(hours)} Hours, {int(minutes)} Minutes, {int(seconds)} Seconds\"\n</code></pre>"},{"location":"reference/youtube_service/","title":"Youtube Servive Documentation","text":""},{"location":"reference/youtube_service/#app.services.youtube_service","title":"<code>app.services.youtube_service</code>","text":""},{"location":"reference/youtube_service/#app.services.youtube_service.YouTubeService","title":"<code>YouTubeService</code>","text":"<p>Service class for handling YouTube API interactions.</p> <p>This class provides methods to interact with YouTube API for retrieving and processing playlist information, including video durations and details.</p> <p>Attributes:</p> Name Type Description <code>config</code> <code>Config</code> <p>Configuration object containing API settings.</p> <code>youtube</code> <p>YouTube API service object.</p> Source code in <code>app/services/youtube_service.py</code> <pre><code>class YouTubeService:\n    \"\"\"Service class for handling YouTube API interactions.\n\n    This class provides methods to interact with YouTube API for retrieving and\n    processing playlist information, including video durations and details.\n\n    Attributes:\n        config (Config): Configuration object containing API settings.\n        youtube: YouTube API service object.\n    \"\"\"\n\n    def __init__(self, config: Config):\n        \"\"\"Initialize YouTubeService with configuration.\n\n        Args:\n            config (Config): Configuration object containing YouTube API settings.\n        \"\"\"\n        self.config = config\n        self.youtube = build(\n            \"youtube\",\n            config.YOUTUBE_API_VERSION,\n            developerKey=config.YOUTUBE_API_KEY,\n            cache_discovery=False,\n        )\n        self._compile_patterns()\n\n    def _compile_patterns(self):\n        \"\"\"Compile regex patterns used for duration parsing.\n\n        Initializes compiled regex patterns for parsing hours, minutes, seconds\n        from YouTube duration format, and playlist URL pattern.\n        \"\"\"\n        self.hours_pattern = re.compile(r\"(\\d+)H\")\n        self.minutes_pattern = re.compile(r\"(\\d+)M\")\n        self.seconds_pattern = re.compile(r\"(\\d+)S\")\n        self.playlist_pattern = re.compile(r\"^([\\S]+list=)?([\\w_-]+)[\\S]*$\")\n\n    def extract_playlist_id(self, playlist_link: str) -&gt; str:\n        \"\"\"Extract playlist ID from a YouTube playlist URL.\n\n        Args:\n            playlist_link (str): Full YouTube playlist URL or just the playlist ID.\n\n        Returns:\n            str: The extracted playlist ID.\n\n        Raises:\n            InvalidYoutubePlaylistLink: If the provided URL is not a valid YouTube playlist link.\n        \"\"\"\n        match = self.playlist_pattern.match(playlist_link)\n        if not match:\n            raise InvalidYoutubePlaylistLink(\n                \"The provided URL is not a valid YouTube playlist link\"\n            )\n        return match.group(2)\n\n    def get_playlist_details(\n        self, playlist_id: str\n    ) -&gt; Tuple[int, float, List[Dict[str, Any]]]:\n        \"\"\"Retrieve complete information about a YouTube playlist.\n\n        Args:\n            playlist_id (str): YouTube playlist ID.\n\n        Returns:\n            Tuple containing:\n                - int: Total number of videos in playlist\n                - float: Total duration in seconds\n                - List[Dict[str, Any]]: List of video details containing:\n                    - title (str): Video title\n                    - duration_minutes (float): Video duration in minutes\n\n        Raises:\n            ValueError: If there's an error fetching the playlist information.\n        \"\"\"\n        total_seconds = 0\n        video_data = []\n        next_page_token = \"\"\n\n        while True:\n            try:\n                items = self._get_playlist_page(playlist_id, next_page_token)\n                video_info = self._process_videos(items)\n\n                for info in video_info:\n                    total_seconds += info[\"duration_seconds\"]\n                    video_data.append(\n                        {\n                            \"title\": info[\"title\"],\n                            \"duration_minutes\": info[\"duration_seconds\"] / 60,\n                        }\n                    )\n\n                next_page_token = items.get(\"nextPageToken\")\n                if not next_page_token:\n                    break\n            except Exception as e:\n                raise ValueError(f\"Error fetching playlist: {str(e)}\")\n\n        return len(video_data), total_seconds, video_data\n\n    def _get_playlist_page(self, playlist_id: str, page_token: str) -&gt; Dict:\n        \"\"\"Fetch a single page of playlist items from YouTube API.\n\n        Args:\n            playlist_id (str): YouTube playlist ID.\n            page_token (str): Token for pagination, empty for first page.\n\n        Returns:\n            Dict: Raw API response containing playlist items information.\n        \"\"\"\n        return (\n            self.youtube.playlistItems()\n            .list(\n                part=\"contentDetails\",\n                playlistId=playlist_id,\n                maxResults=self.config.MAX_RESULTS,\n                pageToken=page_token,\n            )\n            .execute()\n        )\n\n    def _process_videos(self, playlist_items: Dict) -&gt; List[Dict]:\n        \"\"\"Process video information from playlist items.\n\n        Args:\n            playlist_items (Dict): Raw playlist items from YouTube API.\n\n        Returns:\n            List[Dict]: List of processed video information containing title and duration.\n        \"\"\"\n        video_ids = [\n            item[\"contentDetails\"][\"videoId\"] for item in playlist_items[\"items\"]\n        ]\n\n        videos = (\n            self.youtube.videos()\n            .list(part=\"contentDetails,snippet\", id=\",\".join(video_ids))\n            .execute()\n        )\n\n        return [self._extract_video_info(video) for video in videos[\"items\"]]\n\n    def _extract_video_info(self, video: Dict) -&gt; Dict:\n        \"\"\"Extract relevant information from a video item.\n\n        Args:\n            video (Dict): Raw video information from YouTube API.\n\n        Returns:\n            Dict: Processed video information containing:\n                - title (str): Video title\n                - duration_seconds (float): Video duration in seconds\n        \"\"\"\n        duration = video[\"contentDetails\"][\"duration\"]\n        seconds = self._parse_duration(duration)\n\n        return {\"title\": video[\"snippet\"][\"title\"], \"duration_seconds\": seconds}\n\n    def _parse_duration(self, duration: str) -&gt; float:\n        \"\"\"Parse ISO 8601 duration format to seconds.\n\n        Args:\n            duration (str): Duration string in ISO 8601 format (e.g., 'PT1H2M10S').\n\n        Returns:\n            float: Duration in seconds.\n        \"\"\"\n        hours = self.hours_pattern.search(duration)\n        minutes = self.minutes_pattern.search(duration)\n        seconds = self.seconds_pattern.search(duration)\n\n        return timedelta(\n            hours=int(hours.group(1)) if hours else 0,\n            minutes=int(minutes.group(1)) if minutes else 0,\n            seconds=int(seconds.group(1)) if seconds else 0,\n        ).total_seconds()\n</code></pre>"},{"location":"reference/youtube_service/#app.services.youtube_service.YouTubeService.__init__","title":"<code>__init__(config)</code>","text":"<p>Initialize YouTubeService with configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Config</code> <p>Configuration object containing YouTube API settings.</p> required Source code in <code>app/services/youtube_service.py</code> <pre><code>def __init__(self, config: Config):\n    \"\"\"Initialize YouTubeService with configuration.\n\n    Args:\n        config (Config): Configuration object containing YouTube API settings.\n    \"\"\"\n    self.config = config\n    self.youtube = build(\n        \"youtube\",\n        config.YOUTUBE_API_VERSION,\n        developerKey=config.YOUTUBE_API_KEY,\n        cache_discovery=False,\n    )\n    self._compile_patterns()\n</code></pre>"},{"location":"reference/youtube_service/#app.services.youtube_service.YouTubeService.extract_playlist_id","title":"<code>extract_playlist_id(playlist_link)</code>","text":"<p>Extract playlist ID from a YouTube playlist URL.</p> <p>Parameters:</p> Name Type Description Default <code>playlist_link</code> <code>str</code> <p>Full YouTube playlist URL or just the playlist ID.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The extracted playlist ID.</p> <p>Raises:</p> Type Description <code>InvalidYoutubePlaylistLink</code> <p>If the provided URL is not a valid YouTube playlist link.</p> Source code in <code>app/services/youtube_service.py</code> <pre><code>def extract_playlist_id(self, playlist_link: str) -&gt; str:\n    \"\"\"Extract playlist ID from a YouTube playlist URL.\n\n    Args:\n        playlist_link (str): Full YouTube playlist URL or just the playlist ID.\n\n    Returns:\n        str: The extracted playlist ID.\n\n    Raises:\n        InvalidYoutubePlaylistLink: If the provided URL is not a valid YouTube playlist link.\n    \"\"\"\n    match = self.playlist_pattern.match(playlist_link)\n    if not match:\n        raise InvalidYoutubePlaylistLink(\n            \"The provided URL is not a valid YouTube playlist link\"\n        )\n    return match.group(2)\n</code></pre>"},{"location":"reference/youtube_service/#app.services.youtube_service.YouTubeService.get_playlist_details","title":"<code>get_playlist_details(playlist_id)</code>","text":"<p>Retrieve complete information about a YouTube playlist.</p> <p>Parameters:</p> Name Type Description Default <code>playlist_id</code> <code>str</code> <p>YouTube playlist ID.</p> required <p>Returns:</p> Type Description <code>Tuple[int, float, List[Dict[str, Any]]]</code> <p>Tuple containing: - int: Total number of videos in playlist - float: Total duration in seconds - List[Dict[str, Any]]: List of video details containing:     - title (str): Video title     - duration_minutes (float): Video duration in minutes</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If there's an error fetching the playlist information.</p> Source code in <code>app/services/youtube_service.py</code> <pre><code>def get_playlist_details(\n    self, playlist_id: str\n) -&gt; Tuple[int, float, List[Dict[str, Any]]]:\n    \"\"\"Retrieve complete information about a YouTube playlist.\n\n    Args:\n        playlist_id (str): YouTube playlist ID.\n\n    Returns:\n        Tuple containing:\n            - int: Total number of videos in playlist\n            - float: Total duration in seconds\n            - List[Dict[str, Any]]: List of video details containing:\n                - title (str): Video title\n                - duration_minutes (float): Video duration in minutes\n\n    Raises:\n        ValueError: If there's an error fetching the playlist information.\n    \"\"\"\n    total_seconds = 0\n    video_data = []\n    next_page_token = \"\"\n\n    while True:\n        try:\n            items = self._get_playlist_page(playlist_id, next_page_token)\n            video_info = self._process_videos(items)\n\n            for info in video_info:\n                total_seconds += info[\"duration_seconds\"]\n                video_data.append(\n                    {\n                        \"title\": info[\"title\"],\n                        \"duration_minutes\": info[\"duration_seconds\"] / 60,\n                    }\n                )\n\n            next_page_token = items.get(\"nextPageToken\")\n            if not next_page_token:\n                break\n        except Exception as e:\n            raise ValueError(f\"Error fetching playlist: {str(e)}\")\n\n    return len(video_data), total_seconds, video_data\n</code></pre>"}]}